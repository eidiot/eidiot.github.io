<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Evan is Coding]]></title>
  <subtitle><![CDATA[Swift, Objective-C, JavaScript, ActionScript, C++, Java]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://evancoding.com/"/>
  <updated>2015-12-21T07:06:46.000Z</updated>
  <id>http://evancoding.com/</id>
  
  <author>
    <name><![CDATA[Evan Liu]]></name>
    <email><![CDATA[evancoding@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Angular event and action timer]]></title>
    <link href="http://evancoding.com/2015/12/21/Angular-event-and-action-timer/"/>
    <id>http://evancoding.com/2015/12/21/Angular-event-and-action-timer/</id>
    <published>2015-12-21T07:06:46.000Z</published>
    <updated>2015-12-21T07:06:46.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://angular.io/" target="_blank" rel="external">Angular 2</a> is already in Beta but I am now still working on a project with <a href="http://ionicframework.com/" target="_blank" rel="external">ionic</a> which is based on angular 1.4.3. Maybe too late but there are two small pieces of code I think worthing sharing, so I put them into two tiny libs for angular 1: <a href="https://github.com/evan-liu/angular-event" target="_blank" rel="external">angular-event</a> and <a href="https://github.com/evan-liu/angular-action-timer" target="_blank" rel="external">angular-action-timer</a>. </p>
<h1 id="angular-event"><a href="#angular-event" class="headerlink" title="angular-event"></a>angular-event</h1><p>Some people are using <code>$rootScope.$emit()</code> for event based communication. <a href="https://github.com/evan-liu/angular-event" target="_blank" rel="external">angular-event</a> is basicly a wrapper arount it but no more string event names typing around. </p>
<a id="more"></a>
<h2 id="Use_as_global_events"><a href="#Use_as_global_events" class="headerlink" title="Use as global events"></a>Use as global events</h2><h3 id="Define_the_event_service"><a href="#Define_the_event_service" class="headerlink" title="Define the event service"></a>Define the event service</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'demo'</span>)</span><br><span class="line">  .factory(<span class="string">'evtDemoTriggered'</span>, evtDemoTriggered);</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">evtDemoTriggered</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> event(<span class="string">'demo:triggered'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Inject_and_dispatch_the_event"><a href="#Inject_and_dispatch_the_event" class="headerlink" title="Inject and dispatch the event"></a>Inject and dispatch the event</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'demo'</span>)</span><br><span class="line">  .factory(<span class="string">'demoTrigger'</span>, demoTrigger);</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demoTrigger</span>(<span class="params">evtDemoTriggered</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    evtDemoTriggered.emit();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Inject_and_listen_to_the_event"><a href="#Inject_and_listen_to_the_event" class="headerlink" title="Inject and listen to the event"></a>Inject and listen to the event</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'demo'</span>)</span><br><span class="line">  .factory(<span class="string">'demoModel'</span>, demoModel);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demoModel</span>(<span class="params">evtDemoTriggered</span>) </span>&#123;</span><br><span class="line">  evtDemoTriggered.on(onDemoTriggered);</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onDemoTriggered</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Use_as_an_instance_event"><a href="#Use_as_an_instance_event" class="headerlink" title="Use as an instance event"></a>Use as an instance event</h2><h3 id="Define_and_dispatch_the_instance_event"><a href="#Define_and_dispatch_the_instance_event" class="headerlink" title="Define and dispatch the instance event"></a>Define and dispatch the instance event</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'demo'</span>)</span><br><span class="line">  .factory(<span class="string">'demoModel'</span>, demoModel);</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demoModel</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> model = &#123;</span><br><span class="line">    value: <span class="number">0</span>,</span><br><span class="line">    evtUpdate: event(<span class="string">'demo:model:update'</span>)</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> model;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    model.value++;</span><br><span class="line">    model.evtUpdate.emit(model.value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Inject_and_listen_to_the_event-1"><a href="#Inject_and_listen_to_the_event-1" class="headerlink" title="Inject and listen to the event"></a>Inject and listen to the event</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'demo'</span>)</span><br><span class="line">  .controller(<span class="string">'demoController'</span>, demoController);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demoController</span>(<span class="params">demoModel</span>) </span>&#123;</span><br><span class="line">  demoModel.evtUpdate.on(onModelUpdate);</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onModelUpdate</span>(<span class="params">event, value</span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'Model updated: '</span> + value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="angular-action-timer"><a href="#angular-action-timer" class="headerlink" title="angular-action-timer"></a>angular-action-timer</h1><p><a href="https://github.com/evan-liu/angular-action-timer" target="_blank" rel="external">angular-action-timer</a> is a wrapper of <code>$timeout</code> and useful when some function needs to be invoked after user “stop” doing something continually. Here is a <a href="http://plnkr.co/Lvw8BG" target="_blank" rel="external">Demo</a> for it working together with <a href="https://github.com/evan-liu/angular-event" target="_blank" rel="external">angular-event</a>. </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'demo'</span>, [<span class="string">'ng.event'</span>, <span class="string">'ng.actionTimer'</span>])</span><br><span class="line">  .factory(<span class="string">'demoTrigger'</span>, demoTrigger);</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demoTrigger</span>(<span class="params">evtDemoTriggered, actionTimer</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> timer = actionTimer(trigger, <span class="number">500</span>);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    execute: execute</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    timer.schedule();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    evtDemoTriggered.emit();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://angular.io/">Angular 2</a> is already in Beta but I am now still working on a project with <a href="http://ionicframework.com/">ionic</a> which is based on angular 1.4.3. Maybe too late but there are two small pieces of code I think worthing sharing, so I put them into two tiny libs for angular 1: <a href="https://github.com/evan-liu/angular-event">angular-event</a> and <a href="https://github.com/evan-liu/angular-action-timer">angular-action-timer</a>. </p>
<h1 id="angular-event"><a href="#angular-event" class="headerlink" title="angular-event"></a>angular-event</h1><p>Some people are using <code>$rootScope.$emit()</code> for event based communication. <a href="https://github.com/evan-liu/angular-event">angular-event</a> is basicly a wrapper arount it but no more string event names typing around. </p>]]>
    
    </summary>
    
      <category term="AngularJS" scheme="http://evancoding.com/tags/AngularJS/"/>
    
      <category term="Event" scheme="http://evancoding.com/tags/Event/"/>
    
      <category term="JavaScript" scheme="http://evancoding.com/tags/JavaScript/"/>
    
      <category term="Timer" scheme="http://evancoding.com/tags/Timer/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[FormationLayout and Protocol-Oriented Programming in Swift]]></title>
    <link href="http://evancoding.com/2015/06/24/FormationLayout-and-Protocol-Oriented-Programming-in-Swift/"/>
    <id>http://evancoding.com/2015/06/24/FormationLayout-and-Protocol-Oriented-Programming-in-Swift/</id>
    <published>2015-06-24T08:39:19.000Z</published>
    <updated>2015-07-02T21:05:26.000Z</updated>
    <content type="html"><![CDATA[<p>My favourite talk of <a href="https://developer.apple.com/videos/wwdc/2015/" target="_blank" rel="external">WWDC 2015</a> was <a href="https://developer.apple.com/videos/wwdc/2015/?id=408" target="_blank" rel="external">Protocol-Oriented Programming in Swift</a>. However, when <a href="https://twitter.com/daveabrahams" target="_blank" rel="external">Dave Abrahams</a> says, “Swift is the first Protocol-Oriented Programming language”, I didn’t get it. Isn’t <code>protocol</code> in Swift the same as <code>interface</code> in other languages? Isn’t “Protocol-Oriented Programming” the same as one of the <a href="https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)" target="_blank" rel="external">SOLID principles</a> - <a href="https://en.wikipedia.org/wiki/Dependency_inversion_principle" target="_blank" rel="external">Dependency inversion principle</a> - “Depend upon Abstractions. Do not depend upon concretions”? It is not new at all.</p>
<p>Then in the later part of the talk I learned from <a href="https://twitter.com/daveabrahams" target="_blank" rel="external">Dave</a> how powerful protocol is in Swift 2, especially <strong>Self Requirement</strong> and <strong>Protocol Extensions</strong>, and why we should use protocols instead of classes for abstraction.  I felt excited and already Protocol-Oriented myself after watching the talk. I need to do something to check if I really am :)</p>
<p>So here comes <a href="https://github.com/evan-liu/FormationLayout" target="_blank" rel="external">FormationLayout</a>, a Protocol-Oriented AutoLayout library in Swift 2. Now I will show you how I made it Protocol-Oriented and why it is good.</p>
<a id="more"></a>
<p>There are three main types in <a href="https://github.com/evan-liu/FormationLayout" target="_blank" rel="external">FormationLayout</a>: </p>
<ul>
<li><code>FormationLayout</code> - Top level layout manager. </li>
<li><code>ViewFormation</code> - Layout manager for one view. Created by <code>FormationLayout.view()</code>.</li>
<li><code>GroupFormation</code> - Layout manager for a group of views. Created by <code>FormationLayout.group()</code>.</li>
</ul>
<p>My first two goals: </p>
<ul>
<li>The constraint factory methods of “formations” should be chainable.</li>
<li>The <code>GroupFormation</code> should be able to do the same things as <code>ViewFormation</code> does on each view in the group.</li>
</ul>
<pre><code class="swift"><span class="keyword">let</span> layout = <span class="type">FormationLayout</span>(rootView: view)
layout.view(v1).width(<span class="number">100</span>).height(<span class="number">50</span>)
layout.group(v2, v3, v4).width(<span class="number">100</span>).height(<span class="number">50</span>)
</code></pre>
<p>It is easy by using an abstract class. </p>
<pre><code class="swift"><span class="class"><span class="keyword">class</span> <span class="title">AbstractFormation</span> </span>{
    <span class="function"><span class="keyword">func</span> <span class="title">width</span><span class="params">(value: CGFloat)</span></span> -&gt; <span class="type">Self</span> { <span class="built_in">fatalError</span>(<span class="string">"abstract"</span>) }
    <span class="function"><span class="keyword">func</span> <span class="title">height</span><span class="params">(value: CGFloat)</span></span> -&gt; <span class="type">Self</span> { <span class="built_in">fatalError</span>(<span class="string">"abstract"</span>) }
}
<span class="class"><span class="keyword">class</span> <span class="title">ViewFormation</span>: <span class="title">AbstractFormation</span> </span>{
    <span class="comment">// Create constraints in these methods then return self.</span>
    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">width</span><span class="params">(value: CGFloat)</span></span> -&gt; <span class="type">Self</span> { <span class="keyword">return</span> <span class="keyword">self</span> }
    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">height</span><span class="params">(value: CGFloat)</span></span> -&gt; <span class="type">Self</span> { <span class="keyword">return</span> <span class="keyword">self</span> }
}
<span class="class"><span class="keyword">class</span> <span class="title">GroupFormation</span>: <span class="title">AbstractFormation</span> </span>{
    <span class="comment">// Call same methods on each view in the group then return self.</span>
    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">width</span><span class="params">(value: CGFloat)</span></span> -&gt; <span class="type">Self</span> { <span class="keyword">return</span> <span class="keyword">self</span> }
    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">height</span><span class="params">(value: CGFloat)</span></span> -&gt; <span class="type">Self</span> { <span class="keyword">return</span> <span class="keyword">self</span> }
}
</code></pre>
<p>Now I want the formations to make size of a view be the same as another. </p>
<pre><code class="swift"><span class="keyword">let</span> layout = <span class="type">FormationLayout</span>(rootView: view)
layout.view(v1).width(v5).height(v5)
layout.group(v2, v3, v4).width(v5).height(v5)
</code></pre>
<p>Still easy. Add another two abstract methods in the abstract class and make the two formation types override them, right? Wait, how about the <a href="https://en.wikipedia.org/wiki/Open/closed_principle" target="_blank" rel="external">open/closed principle</a>? I don’t want to modify all my classes every time I want new features!</p>
<p>Let’s try protocols instead.</p>
<pre><code class="swift"><span class="class"><span class="keyword">protocol</span> <span class="title">FormationTakesCGFloat</span> </span>{
    <span class="function"><span class="keyword">func</span> <span class="title">width</span><span class="params">(value: CGFloat)</span></span> -&gt; <span class="type">Self</span>
    <span class="function"><span class="keyword">func</span> <span class="title">height</span><span class="params">(value: CGFloat)</span></span> -&gt; <span class="type">Self</span>
}
<span class="class"><span class="keyword">extension</span> <span class="title">ViewFormation</span>: <span class="title">FormationTakesCGFloat</span> </span>{
    <span class="comment">// Create constraints in these methods then return self.</span>
    <span class="function"><span class="keyword">func</span> <span class="title">width</span><span class="params">(value: CGFloat)</span></span> -&gt; <span class="type">Self</span> { <span class="keyword">return</span> <span class="keyword">self</span> }
    <span class="function"><span class="keyword">func</span> <span class="title">height</span><span class="params">(value: CGFloat)</span></span> -&gt; <span class="type">Self</span> { <span class="keyword">return</span> <span class="keyword">self</span> }
}
<span class="class"><span class="keyword">extension</span> <span class="title">GroupFormation</span>: <span class="title">FormationTakesCGFloat</span> </span>{
    <span class="comment">// Call same methods on each view in the group then return self.</span>
    <span class="function"><span class="keyword">func</span> <span class="title">width</span><span class="params">(value: CGFloat)</span></span> -&gt; <span class="type">Self</span> { <span class="keyword">return</span> <span class="keyword">self</span> }
    <span class="function"><span class="keyword">func</span> <span class="title">height</span><span class="params">(value: CGFloat)</span></span> -&gt; <span class="type">Self</span> { <span class="keyword">return</span> <span class="keyword">self</span> }
}

<span class="class"><span class="keyword">protocol</span> <span class="title">FormationTakesUIView</span> </span>{
    <span class="function"><span class="keyword">func</span> <span class="title">width</span><span class="params">(targetView: UIView)</span></span> -&gt; <span class="type">Self</span>
    <span class="function"><span class="keyword">func</span> <span class="title">height</span><span class="params">(targetView: UIView)</span></span> -&gt; <span class="type">Self</span>
}
<span class="comment">//... extension ViewFormation &amp; GroupFormation: FormationTakesUIView ...</span>
</code></pre>
<p>Firstly, we now have different protocols and formation extensions that confirm to the protocols. When we need other forms of constraint factory methods just create new protocols and extensions. No changes to any exist code.</p>
<p>Secondly, methods return <code>Self</code> to make them chainable even though they are defined in different protocols or extensions. </p>
<p>That’s good. Now I want more methods that take constant value and UIView. So let’s add <code>top()</code> and <code>bottom()</code> to all the protocols and extensions …</p>
<p>Wait, we have <strong>Protocol Extensions</strong> in Swift 2. Let’s change our protocols: </p>
<pre><code class="swift"><span class="class"><span class="keyword">protocol</span> <span class="title">FormationTakesCGFloat</span> </span>{
    <span class="function"><span class="keyword">func</span> <span class="title">attribute</span><span class="params">(attribute: NSLayoutAttribute, value: CGFloat)</span></span> -&gt; <span class="type">Self</span>
}
<span class="class"><span class="keyword">extension</span> <span class="title">ViewFormation</span>: <span class="title">FormationTakesCGFloat</span> </span>{
    <span class="comment">// Create constraints in this method then return self.</span>
    attribute(attribute: <span class="type">NSLayoutAttribute</span>, value: <span class="type">CGFloat</span>) -&gt; <span class="type">Self</span> { <span class="keyword">return</span> <span class="keyword">self</span> }
}
<span class="class"><span class="keyword">extension</span> <span class="title">GroupFormation</span>: <span class="title">FormationTakesCGFloat</span> </span>{
    <span class="comment">// Call same methods on each view in the group then return self.</span>
    attribute(attribute: <span class="type">NSLayoutAttribute</span>, value: <span class="type">CGFloat</span>) -&gt; <span class="type">Self</span> { <span class="keyword">return</span> <span class="keyword">self</span> }
}

<span class="class"><span class="keyword">extension</span> <span class="title">FormationTakesCGFloat</span> </span>{
    <span class="function"><span class="keyword">func</span> <span class="title">width</span><span class="params">(value: CGFloat)</span></span> -&gt; <span class="type">Self</span> {
        <span class="keyword">return</span> attribute(.<span class="type">Width</span>, value: value)
    }
    <span class="function"><span class="keyword">func</span> <span class="title">height</span><span class="params">(value: CGFloat)</span></span> -&gt; <span class="type">Self</span> {
        <span class="keyword">return</span> attribute(.<span class="type">Height</span>, value: value)
    }    
}
</code></pre>
<p>When we want more methods take <code>CGFloat</code>/<code>UIView</code>, create more <strong>Protocol Extensions</strong>.</p>
<pre><code class="swift"><span class="class"><span class="keyword">extension</span> <span class="title">FormationTakesCGFloat</span> </span>{
    <span class="function"><span class="keyword">func</span> <span class="title">top</span><span class="params">(value: CGFloat)</span></span> -&gt; <span class="type">Self</span> {
        <span class="keyword">return</span> attribute(.<span class="type">Top</span>, value: value)
    }
    <span class="function"><span class="keyword">func</span> <span class="title">bottom</span><span class="params">(value: CGFloat)</span></span> -&gt; <span class="type">Self</span> {
        <span class="keyword">return</span> attribute(.<span class="type">Bottom</span>, value: value)
    }    
}
</code></pre>
<p>Then both <code>ViewFormation</code> and <code>GroupFormatoin</code> will have <code>top()</code> and <code>bottom()</code> methods without any changes to exist code.</p>
<p>So this is how <a href="https://github.com/evan-liu/FormationLayout" target="_blank" rel="external">FormationLayout</a> looks like now: </p>
<h4 id="Methods_are_chainable"><a href="#Methods_are_chainable" class="headerlink" title="Methods are chainable"></a>Methods are chainable</h4><p>Even group only methods like <code>hSpace()</code> and <code>vSpace()</code>:</p>
<pre><code class="swift">layout.group(v1, v2, v3).size(<span class="number">100</span>).hSpace(<span class="number">10</span>).centerY(view)
</code></pre>
<h4 id="Features_are_protocols"><a href="#Features_are_protocols" class="headerlink" title="Features are protocols"></a>Features are protocols</h4><p>Steps to add a new feature (form of constraint factory methods): </p>
<ul>
<li>Create a protocol.</li>
<li>Create extensions of the formations that support the new feature to confirm to the protocol.</li>
<li>Create protocol extensions for helper methods. All formations that confirm to the protocol will have the new methods.</li>
<li>No changes to any exist code!</li>
</ul>
<p>Now I feel myself more Protocol-Oriented. Need to be better by watching <a href="https://developer.apple.com/videos/wwdc/2015/?id=414" target="_blank" rel="external">Building Better Apps with Value Types in Swift</a> :)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>My favourite talk of <a href="https://developer.apple.com/videos/wwdc/2015/">WWDC 2015</a> was <a href="https://developer.apple.com/videos/wwdc/2015/?id=408">Protocol-Oriented Programming in Swift</a>. However, when <a href="https://twitter.com/daveabrahams">Dave Abrahams</a> says, “Swift is the first Protocol-Oriented Programming language”, I didn’t get it. Isn’t <code>protocol</code> in Swift the same as <code>interface</code> in other languages? Isn’t “Protocol-Oriented Programming” the same as one of the <a href="https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)">SOLID principles</a> - <a href="https://en.wikipedia.org/wiki/Dependency_inversion_principle">Dependency inversion principle</a> - “Depend upon Abstractions. Do not depend upon concretions”? It is not new at all.</p>
<p>Then in the later part of the talk I learned from <a href="https://twitter.com/daveabrahams">Dave</a> how powerful protocol is in Swift 2, especially <strong>Self Requirement</strong> and <strong>Protocol Extensions</strong>, and why we should use protocols instead of classes for abstraction.  I felt excited and already Protocol-Oriented myself after watching the talk. I need to do something to check if I really am :)</p>
<p>So here comes <a href="https://github.com/evan-liu/FormationLayout">FormationLayout</a>, a Protocol-Oriented AutoLayout library in Swift 2. Now I will show you how I made it Protocol-Oriented and why it is good.</p>]]>
    
    </summary>
    
      <category term="Swift" scheme="http://evancoding.com/tags/Swift/"/>
    
      <category term="iOS" scheme="http://evancoding.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[BDD Demo with GameOfLife in Swift and Quick]]></title>
    <link href="http://evancoding.com/2015/05/22/BDD-Demo-with-GameOfLife-in-Swift-and-Quick/"/>
    <id>http://evancoding.com/2015/05/22/BDD-Demo-with-GameOfLife-in-Swift-and-Quick/</id>
    <published>2015-05-21T22:40:31.000Z</published>
    <updated>2015-05-23T21:09:19.000Z</updated>
    <content type="html"><![CDATA[<p>BDD(<a href="http://en.wikipedia.org/wiki/Behavior-driven_development" target="_blank" rel="external">Behavior Driven development</a>) was firstly developed by <a href="http://dannorth.net/blog/" target="_blank" rel="external">Dan North</a> as a response to the issues encountered teaching test-driven development:</p>
<ul>
<li>Where to start in the process</li>
<li>What to test and what not to test</li>
<li>How much to test in one go</li>
<li>What to call the tests</li>
<li>How to understand why a test fails</li>
</ul>
<p>That was <a href="http://dannorth.net/2012/05/31/bdd-is-like-tdd-if/comment-page-1/#comment-10313" target="_blank" rel="external">version 1</a> of BDD in mid-2003. <a href="http://dannorth.net/2012/05/31/bdd-is-like-tdd-if" target="_blank" rel="external">BDD v3</a> now is more about communications between all different roles in agile teams using the same language: GivenWhenThen(<a href="https://github.com/cucumber/cucumber/wiki/Given-When-Then" target="_blank" rel="external">[1]</a> <a href="http://martinfowler.com/bliki/GivenWhenThen.html" target="_blank" rel="external">[2]</a>). </p>
<p>I made <a href="/2014/09/06/TDD-Demo-GameOfLife-with-Android-Studio/">some videos</a> before to demonstrate TDD on Android platform using <a href="http://en.wikipedia.org/wiki/Conway%27s_Game_of_Life" target="_blank" rel="external">Conway’s Game of Life</a> as an example. This time I will use this example again to demonstrate BDD on iOS platform in Swift and a BDD framework <a href="https://github.com/Quick/Quick" target="_blank" rel="external">Quick</a>.<br>(<a href="https://github.com/evan-liu/BDD-GameOfLife-Swift" target="_blank" rel="external">Code at GitHub</a>)</p>
<h2 id="1-_Create_Project_and_Add_Quick_Framework"><a href="#1-_Create_Project_and_Add_Quick_Framework" class="headerlink" title="1. Create Project and Add Quick Framework"></a>1. Create Project and Add Quick Framework</h2><ul>
<li>Create a “Single View Application” in XCode. </li>
<li><a href="https://github.com/Quick/Quick/blob/master/Documentation/InstallingQuick.md#cocoapods" target="_blank" rel="external">Install Quick</a> by <a href="https://cocoapods.org/" target="_blank" rel="external">CocoaPods</a> </li>
<li>Open GameOfLife.xcworkspace</li>
</ul>
<a id="more"></a>
<h2 id="2-_GameOfLifeSpec"><a href="#2-_GameOfLifeSpec" class="headerlink" title="2. GameOfLifeSpec"></a>2. GameOfLifeSpec</h2><ul>
<li>Rename GameOfLifeTests to GameOfLifeSpec</li>
</ul>
<figure class="highlight swift"><figcaption><span>GameOfLifeSpec.swift</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Quick</span><br><span class="line"><span class="keyword">import</span> Nimble</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameOfLifeSpec</span>: <span class="title">QuickSpec</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">spec</span><span class="params">()</span></span> &#123;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-_Rule__231"><a href="#3-_Rule__231" class="headerlink" title="3. Rule #1"></a>3. Rule #1</h2><figure class="highlight swift"><figcaption><span>GameOfLifeSpec.swift</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Quick</span><br><span class="line"><span class="keyword">import</span> Nimble</span><br><span class="line"><span class="keyword">import</span> GameOfLife</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameOfLifeSpec</span>: <span class="title">QuickSpec</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">spec</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> model:<span class="type">GameOfLifeModel</span>!</span><br><span class="line">        beforeEach &#123;</span><br><span class="line">            model = <span class="type">GameOfLifeModel</span>(rows: <span class="number">3</span>, columns: <span class="number">3</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        describe(<span class="string">"Rule #1"</span>) &#123;</span><br><span class="line">            context(<span class="string">"A live cell with fewer than 2 live neighbours"</span>) &#123;</span><br><span class="line">                it(<span class="string">"will die"</span>) &#123;</span><br><span class="line">                    model.makeCellBeAliveAtRow(<span class="number">1</span>, column: <span class="number">1</span>)</span><br><span class="line">                    <span class="comment">// 0 live neighbours</span></span><br><span class="line">                    expect(model.willCellBeAliveAtRow(<span class="number">1</span>, column: <span class="number">1</span>)).to(beFalse())</span><br><span class="line">                    <span class="comment">// 1 live neighbour</span></span><br><span class="line">                    model.makeCellBeAliveAtRow(<span class="number">0</span>, column: <span class="number">0</span>)</span><br><span class="line">                    expect(model.willCellBeAliveAtRow(<span class="number">1</span>, column: <span class="number">1</span>)).to(beFalse())</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight swift"><figcaption><span>GameOfLifeModel.swift</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GameOfLifeModel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> rows: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> columns: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> aliveMap = [<span class="type">String</span>:<span class="type">Bool</span>]()</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(rows:<span class="type">Int</span>, columns:<span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.rows = rows</span><br><span class="line">        <span class="keyword">self</span>.columns = columns;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="func"><span class="keyword">func</span> <span class="title">isCellAliveAtRow</span><span class="params">(row: Int, column: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> aliveMap[keyOfCellAtRow(row, column: column)] == <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="func"><span class="keyword">func</span> <span class="title">makeCellBeAliveAtRow</span><span class="params">(row: Int, column: Int)</span></span> &#123;</span><br><span class="line">        aliveMap[keyOfCellAtRow(row, column: column)] = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="func"><span class="keyword">func</span> <span class="title">willCellBeAliveAtRow</span><span class="params">(row: Int, column: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> aliveNeighbours = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> row - <span class="number">1</span>...row + <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> column - <span class="number">1</span>...column + <span class="number">1</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> !(i == row &amp;&amp; j == column) &amp;&amp; isCellAliveAtRow(i, column: j) &#123;</span><br><span class="line">                    aliveNeighbours++</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> isCellAliveAtRow(row, column: column) &#123;</span><br><span class="line">            <span class="keyword">if</span> aliveNeighbours &lt; <span class="number">2</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="func"><span class="keyword">func</span> <span class="title">keyOfCellAtRow</span><span class="params">(row: Int, column: Int)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"<span class="subst">\(row)</span>_<span class="subst">\(column)</span>"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-_Rule__232"><a href="#4-_Rule__232" class="headerlink" title="4. Rule #2"></a>4. Rule #2</h2><figure class="highlight swift"><figcaption><span>GameOfLifeSpec.swift</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">"Rule #2"</span>) &#123;</span><br><span class="line">    context(<span class="string">"A live cell with two or three live neighbours"</span>) &#123;</span><br><span class="line">        it(<span class="string">"will live"</span>) &#123;</span><br><span class="line">            model.makeCellBeAliveAtRow(<span class="number">1</span>, column: <span class="number">1</span>)</span><br><span class="line">            <span class="comment">// 2 live neighbours</span></span><br><span class="line">            model.makeCellBeAliveAtRow(<span class="number">0</span>, column: <span class="number">0</span>)</span><br><span class="line">            model.makeCellBeAliveAtRow(<span class="number">0</span>, column: <span class="number">1</span>)</span><br><span class="line">            expect(model.willCellBeAliveAtRow(<span class="number">1</span>, column: <span class="number">1</span>)).to(beTrue())</span><br><span class="line">            <span class="comment">// 3 live neighbours</span></span><br><span class="line">            model.makeCellBeAliveAtRow(<span class="number">0</span>, column: <span class="number">2</span>)</span><br><span class="line">            expect(model.willCellBeAliveAtRow(<span class="number">1</span>, column: <span class="number">1</span>)).to(beTrue())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight swift"><figcaption><span>GameOfLifeModel.swift</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> isCellAliveAtRow(row, column: column) &#123;</span><br><span class="line">    <span class="keyword">if</span> aliveNeighbours &lt; <span class="number">2</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> aliveNeighbours == <span class="number">2</span> || aliveNeighbours == <span class="number">3</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-_Rule__233"><a href="#5-_Rule__233" class="headerlink" title="5. Rule #3"></a>5. Rule #3</h2><figure class="highlight swift"><figcaption><span>GameOfLifeSpec.swift</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">"Rule #3"</span>) &#123;</span><br><span class="line">    context(<span class="string">"A live cell with more than three live neighbours"</span>) &#123;</span><br><span class="line">        it(<span class="string">"will die"</span>) &#123;</span><br><span class="line">            model.makeCellBeAliveAtRow(<span class="number">1</span>, column: <span class="number">1</span>)</span><br><span class="line">            <span class="comment">// 4 live neighbours</span></span><br><span class="line">            model.makeCellBeAliveAtRow(<span class="number">0</span>, column: <span class="number">0</span>)</span><br><span class="line">            model.makeCellBeAliveAtRow(<span class="number">0</span>, column: <span class="number">1</span>)</span><br><span class="line">            model.makeCellBeAliveAtRow(<span class="number">2</span>, column: <span class="number">0</span>)</span><br><span class="line">            model.makeCellBeAliveAtRow(<span class="number">2</span>, column: <span class="number">1</span>)</span><br><span class="line">            expect(model.willCellBeAliveAtRow(<span class="number">1</span>, column: <span class="number">1</span>)).to(beFalse())</span><br><span class="line">            <span class="comment">// 5 live neighbours</span></span><br><span class="line">            model.makeCellBeAliveAtRow(<span class="number">2</span>, column: <span class="number">2</span>)</span><br><span class="line">            expect(model.willCellBeAliveAtRow(<span class="number">1</span>, column: <span class="number">1</span>)).to(beFalse())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight swift"><figcaption><span>GameOfLifeModel.swift</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> isCellAliveAtRow(row, column: column) &#123;</span><br><span class="line">    <span class="keyword">return</span> aliveNeighbours == <span class="number">2</span> || aliveNeighbours == <span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-_Rule__234"><a href="#6-_Rule__234" class="headerlink" title="6. Rule #4"></a>6. Rule #4</h2><figure class="highlight swift"><figcaption><span>GameOfLifeSpec.swift</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">"Rule #4"</span>) &#123;</span><br><span class="line">    context(<span class="string">"A dead cell with exactly three live neighbours"</span>) &#123;</span><br><span class="line">        it(<span class="string">"will live"</span>) &#123;</span><br><span class="line">            <span class="comment">// 2 live neighbours (die)</span></span><br><span class="line">            model.makeCellBeAliveAtRow(<span class="number">0</span>, column: <span class="number">0</span>)</span><br><span class="line">            model.makeCellBeAliveAtRow(<span class="number">0</span>, column: <span class="number">1</span>)</span><br><span class="line">            expect(model.willCellBeAliveAtRow(<span class="number">1</span>, column: <span class="number">1</span>)).to(beFalse())</span><br><span class="line">            <span class="comment">// 3 live neighbours (live)</span></span><br><span class="line">            model.makeCellBeAliveAtRow(<span class="number">0</span>, column: <span class="number">2</span>)</span><br><span class="line">            expect(model.willCellBeAliveAtRow(<span class="number">1</span>, column: <span class="number">1</span>)).to(beTrue())</span><br><span class="line">            <span class="comment">// 4 live neighbours (die)</span></span><br><span class="line">            model.makeCellBeAliveAtRow(<span class="number">1</span>, column: <span class="number">0</span>)</span><br><span class="line">            expect(model.willCellBeAliveAtRow(<span class="number">1</span>, column: <span class="number">1</span>)).to(beFalse())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight swift"><figcaption><span>GameOfLifeModel.swift</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> isCellAliveAtRow(row, column: column) &#123;</span><br><span class="line">    <span class="keyword">return</span> aliveNeighbours == <span class="number">2</span> || aliveNeighbours == <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> aliveNeighbours == <span class="number">3</span></span><br></pre></td></tr></table></figure>
<h2 id="7-_View__26amp_3B_Controller"><a href="#7-_View__26amp_3B_Controller" class="headerlink" title="7. View &amp; Controller"></a>7. View &amp; Controller</h2><p>Add a simple <a href="https://github.com/evan-liu/BDD-GameOfLife-Swift/blob/master/GameOfLife/GameOfLifeView.swift" target="_blank" rel="external">view</a> and <a href="https://github.com/evan-liu/BDD-GameOfLife-Swift/blob/master/GameOfLife/GameOfLifeViewController.swift" target="_blank" rel="external">controller</a>, we will have a <a href="http://en.wikipedia.org/wiki/Gun_(cellular_automaton" target="_blank" rel="external">Gosper Glider Gun</a>.</p>
<p><img src="http://upload.wikimedia.org/wikipedia/commons/e/e5/Gospers_glider_gun.gif" alt="Gosper Glider Gun"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>BDD(<a href="http://en.wikipedia.org/wiki/Behavior-driven_development">Behavior Driven development</a>) was firstly developed by <a href="http://dannorth.net/blog/">Dan North</a> as a response to the issues encountered teaching test-driven development:</p>
<ul>
<li>Where to start in the process</li>
<li>What to test and what not to test</li>
<li>How much to test in one go</li>
<li>What to call the tests</li>
<li>How to understand why a test fails</li>
</ul>
<p>That was <a href="http://dannorth.net/2012/05/31/bdd-is-like-tdd-if/comment-page-1/#comment-10313">version 1</a> of BDD in mid-2003. <a href="http://dannorth.net/2012/05/31/bdd-is-like-tdd-if">BDD v3</a> now is more about communications between all different roles in agile teams using the same language: GivenWhenThen(<a href="https://github.com/cucumber/cucumber/wiki/Given-When-Then">[1]</a> <a href="http://martinfowler.com/bliki/GivenWhenThen.html">[2]</a>). </p>
<p>I made <a href="/2014/09/06/TDD-Demo-GameOfLife-with-Android-Studio/">some videos</a> before to demonstrate TDD on Android platform using <a href="http://en.wikipedia.org/wiki/Conway%27s_Game_of_Life">Conway’s Game of Life</a> as an example. This time I will use this example again to demonstrate BDD on iOS platform in Swift and a BDD framework <a href="https://github.com/Quick/Quick">Quick</a>.<br>(<a href="https://github.com/evan-liu/BDD-GameOfLife-Swift">Code at GitHub</a>)</p>
<h2 id="1-_Create_Project_and_Add_Quick_Framework"><a href="#1-_Create_Project_and_Add_Quick_Framework" class="headerlink" title="1. Create Project and Add Quick Framework"></a>1. Create Project and Add Quick Framework</h2><ul>
<li>Create a “Single View Application” in XCode. </li>
<li><a href="https://github.com/Quick/Quick/blob/master/Documentation/InstallingQuick.md#cocoapods">Install Quick</a> by <a href="https://cocoapods.org/">CocoaPods</a> </li>
<li>Open GameOfLife.xcworkspace</li>
</ul>]]>
    
    </summary>
    
      <category term="BDD" scheme="http://evancoding.com/tags/BDD/"/>
    
      <category term="Swift" scheme="http://evancoding.com/tags/Swift/"/>
    
      <category term="iOS" scheme="http://evancoding.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[AngularJS unit testing with Jasmine]]></title>
    <link href="http://evancoding.com/2015/03/01/AngularJS-unit-testing-with-Jasmine/"/>
    <id>http://evancoding.com/2015/03/01/AngularJS-unit-testing-with-Jasmine/</id>
    <published>2015-02-28T20:42:09.000Z</published>
    <updated>2015-05-22T00:21:02.000Z</updated>
    <content type="html"><![CDATA[<p>I am currently working on a hybrid mobile app using <a href="http://ionicframework.com/" target="_blank" rel="external">Ionic</a> which is based on <a href="http://angularjs.org/" target="_blank" rel="external">AngularJS</a>. <a href="http://angularjs.org/" target="_blank" rel="external">AngularJS</a>, just like my favorite ActionScript 3 framework <a href="http://www.robotlegs.org/" target="_blank" rel="external">Robotlegs</a>, was designed to be testable. With helps of dependency injection and built in mocks, it is quite easy to write tests but still can be painful to get everything sorted out. Here are some tips to make life easier. Like a template (in <a href="http://www.jetbrains.com/webstorm/" target="_blank" rel="external">WebStorm</a>) to setup a test for a service:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'$MODULE$.$NAME$'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $NAME$;</span><br><span class="line">    beforeEach(<span class="built_in">module</span>(<span class="string">'$MODULE$'</span>));</span><br><span class="line">    beforeEach(inject(<span class="function"><span class="keyword">function</span> (<span class="params">_$NAME$_</span>) </span>&#123;</span><br><span class="line">        $NAME$ = _$NAME$_;</span><br><span class="line">    &#125;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Mock_dependencies"><a href="#Mock_dependencies" class="headerlink" title="Mock dependencies"></a>Mock dependencies</h2><p>At start of tests when we load the module we can mock dependencies at the same time:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $VALUE$;</span><br><span class="line">beforeEach(<span class="built_in">module</span>(<span class="string">'$MODULE$'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$provide</span>) </span>&#123;</span><br><span class="line">    $VALUE$ = &#123;$END$&#125;;</span><br><span class="line">    $provide.value(<span class="string">'$VALUE$'</span>, $VALUE$);</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>
<h2 id="Test_controllers"><a href="#Test_controllers" class="headerlink" title="Test controllers"></a>Test controllers</h2><p>Unlike services, controllers can not be injected so we need to instantiate them ourselves.<br><a id="more"></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $NAME$, $rootScope, $scope;</span><br><span class="line">beforeEach(inject(<span class="function"><span class="keyword">function</span> (<span class="params">$controller, _$rootScope_</span>) </span>&#123;</span><br><span class="line">    $rootScope = _$rootScope_;</span><br><span class="line">    $scope = $rootScope.$<span class="keyword">new</span>();</span><br><span class="line">    $NAME$ = $controller(<span class="string">'$NAME$'</span>, &#123;</span><br><span class="line">        <span class="string">'$scope'</span>: $scope</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>
<h2 id="Spies"><a href="#Spies" class="headerlink" title="Spies"></a>Spies</h2><p>It is quiet handy to use spies for mocking and stubbing in Jasmine. Here is a template to return a value from a mocked method.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $VALUE$;</span><br><span class="line">beforeEach(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $VALUE$ = &#123;&#125;;</span><br><span class="line">    spyOn($TARGET$, <span class="string">'$METHOD$'</span>).and.returnValue($VALUE$);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="24q_and_promise"><a href="#24q_and_promise" class="headerlink" title="$q and promise"></a>$q and promise</h2><p>It was a pain for me to test promises at first. I tried to use Jasmine’s asynchronous support by adding done method argument but no luck. Now I just go with Jasmine’s spies.</p>
<p>To save time I have a <code>test_helpers.js</code> and I firstly define $q and $timeout there.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $q, $timeout;</span><br><span class="line"><span class="keyword">var</span> $_q = <span class="function"><span class="keyword">function</span> (<span class="params">_$q_, _$timeout_</span>) </span>&#123;</span><br><span class="line">    $q = _$q_;</span><br><span class="line">    $timeout = _$timeout_;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> $_resolve = <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> defer = $q.defer();</span><br><span class="line">    defer.resolve(value);</span><br><span class="line">    <span class="keyword">return</span> defer.promise;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>Use this template to inject $q, $timeout then you can use them in your test:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(inject(<span class="function"><span class="keyword">function</span> (<span class="params">_$q_, _$timeout_</span>) </span>&#123;</span><br><span class="line">    $_q(_$q_, _$timeout_);</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>
<p>This template is to mock a method and return a promise:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $TARGET$_$METHOD$_defer;</span><br><span class="line">beforeEach(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $TARGET$_$METHOD$_defer = $q.defer();</span><br><span class="line">    spyOn($TARGET$, <span class="string">'$METHOD$'</span>).and.returnValue($TARGET$_$METHOD$_defer.promise);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Then I use spies to verify results and carefully call <code>$timeout.flush();</code> first.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> onSuccess = jasmine.createSpy(<span class="string">'onSuccess'</span>);</span><br><span class="line">$END$</span><br><span class="line">$timeout.flush();</span><br><span class="line">expect(onSuccess).toHaveBeenCalled();</span><br></pre></td></tr></table></figure>
<h2 id="24translate"><a href="#24translate" class="headerlink" title="$translate"></a>$translate</h2><p>Controllers using $translate can be hard to test so I put this to my ‘test_helpers.js’:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $_translate = <span class="function"><span class="keyword">function</span> (<span class="params">$provide, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $translate = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $_resolve(value || &#123;&#125;)</span><br><span class="line">    &#125;;</span><br><span class="line">    $translate.storageKey = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    $translate.storage = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    $translate.preferredLanguage = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'zh'</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    $translate.use = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;;</span><br><span class="line">    $provide.value(<span class="string">'$translate'</span>, $translate);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>And a template to save typing:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="built_in">module</span>(<span class="string">'$MODULE$'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$provide</span>) </span>&#123;</span><br><span class="line">    $_translate($provide);</span><br><span class="line">&#125;));</span><br><span class="line">beforeEach(inject(<span class="function"><span class="keyword">function</span> (<span class="params">_$q_, _$timeout_</span>) </span>&#123;</span><br><span class="line">    $_q(_$q_, _$timeout_);</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>I am currently working on a hybrid mobile app using <a href="http://ionicframework.com/">Ionic</a> which is based on <a href="http://angularjs.org/">AngularJS</a>. <a href="http://angularjs.org/">AngularJS</a>, just like my favorite ActionScript 3 framework <a href="http://www.robotlegs.org/">Robotlegs</a>, was designed to be testable. With helps of dependency injection and built in mocks, it is quite easy to write tests but still can be painful to get everything sorted out. Here are some tips to make life easier. Like a template (in <a href="http://www.jetbrains.com/webstorm/">WebStorm</a>) to setup a test for a service:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'$MODULE$.$NAME$'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $NAME$;</span><br><span class="line">    beforeEach(<span class="built_in">module</span>(<span class="string">'$MODULE$'</span>));</span><br><span class="line">    beforeEach(inject(<span class="function"><span class="keyword">function</span> (<span class="params">_$NAME$_</span>) </span>&#123;</span><br><span class="line">        $NAME$ = _$NAME$_;</span><br><span class="line">    &#125;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Mock_dependencies"><a href="#Mock_dependencies" class="headerlink" title="Mock dependencies"></a>Mock dependencies</h2><p>At start of tests when we load the module we can mock dependencies at the same time:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $VALUE$;</span><br><span class="line">beforeEach(<span class="built_in">module</span>(<span class="string">'$MODULE$'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$provide</span>) </span>&#123;</span><br><span class="line">    $VALUE$ = &#123;$END$&#125;;</span><br><span class="line">    $provide.value(<span class="string">'$VALUE$'</span>, $VALUE$);</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>
<h2 id="Test_controllers"><a href="#Test_controllers" class="headerlink" title="Test controllers"></a>Test controllers</h2><p>Unlike services, controllers can not be injected so we need to instantiate them ourselves.<br>]]>
    
    </summary>
    
      <category term="AngularJS" scheme="http://evancoding.com/tags/AngularJS/"/>
    
      <category term="JavaScript" scheme="http://evancoding.com/tags/JavaScript/"/>
    
      <category term="TDD" scheme="http://evancoding.com/tags/TDD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[C++ unit testing with AppCode and GoogleTest]]></title>
    <link href="http://evancoding.com/2014/10/15/C++-unit-testing-with-AppCode-and-GoogleTest/"/>
    <id>http://evancoding.com/2014/10/15/C++-unit-testing-with-AppCode-and-GoogleTest/</id>
    <published>2014-10-15T08:35:14.000Z</published>
    <updated>2015-05-22T00:21:15.000Z</updated>
    <content type="html"><![CDATA[<p>AppCode started to support <a href="https://code.google.com/p/googletest/" target="_blank" rel="external">Google Test</a> <a href="http://blog.jetbrains.com/objc/2013/09/appcode-2-5-eap-opens-with-cocoapods-and-google-test/" target="_blank" rel="external">since 2.5 EAP</a>. Steps to get it work:</p>
<ol>
<li><a href="https://code.google.com/p/googletest/downloads/list" target="_blank" rel="external">Get Google Test</a></li>
<li>Open <code>{gtest_path}/xcode/gtest.xcodeproj</code> and build <code>gtest.framework</code></li>
<li>Create a “Command Line Tool” project or target</li>
<li>Add <code>gtest.framework</code> to project and the new target</li>
<li>Set Up the Executable Run Environment. 3 options:<ul>
<li><a href="https://code.google.com/p/googletest/wiki/XcodeGuide#Set_Up_the_Executable_Run_Environment" target="_blank" rel="external">Setting the “DYLD_FRAMEWORK_PATH” environment variable</a></li>
<li><a href="http://dennycd.me/google-test-xcode-mac-osx/" target="_blank" rel="external">Use static libs instead of framework</a></li>
<li>I just copy <code>gtest.framework</code> to <code>/Library/Frameworks/</code></li>
</ul>
</li>
<li>Make sure your project and google test use the same C++ standard library<a id="more"></a>
<ul>
<li>If they are different you can <a href="http://dennycd.me/google-test-xcode-mac-osx/" target="_blank" rel="external">make google test to use libc++</a></li>
<li>I change my test target to use the same one as google test instead. (libstdc++) <img src="lib.png" alt="C++ Standard Library"></li>
</ul>
</li>
<li>In AppCode, <code>Run/Edit Configurations</code>, Add new Google Test Configurations <img src="run.png" alt="Add Run Configuration"></li>
<li>Set target to the created “Command Line Tool”</li>
<li>Run google test from main.cpp<pre><code class="c++"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;gtest/gtest.h&gt;</span></span>
<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>{
 ::testing::InitGoogleTest(&amp;argc, argv);
 <span class="keyword">return</span> RUN_ALL_TESTS();
}
</code></pre>
Add your tests and happy testing!<br><img src="googleTest.png" alt="Google Test Support in AppCode"></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>AppCode started to support <a href="https://code.google.com/p/googletest/">Google Test</a> <a href="http://blog.jetbrains.com/objc/2013/09/appcode-2-5-eap-opens-with-cocoapods-and-google-test/">since 2.5 EAP</a>. Steps to get it work:</p>
<ol>
<li><a href="https://code.google.com/p/googletest/downloads/list">Get Google Test</a></li>
<li>Open <code>{gtest_path}/xcode/gtest.xcodeproj</code> and build <code>gtest.framework</code></li>
<li>Create a “Command Line Tool” project or target</li>
<li>Add <code>gtest.framework</code> to project and the new target</li>
<li>Set Up the Executable Run Environment. 3 options:<ul>
<li><a href="https://code.google.com/p/googletest/wiki/XcodeGuide#Set_Up_the_Executable_Run_Environment">Setting the “DYLD_FRAMEWORK_PATH” environment variable</a></li>
<li><a href="http://dennycd.me/google-test-xcode-mac-osx/">Use static libs instead of framework</a></li>
<li>I just copy <code>gtest.framework</code> to <code>/Library/Frameworks/</code></li>
</ul>
</li>
<li>Make sure your project and google test use the same C++ standard library]]>
    
    </summary>
    
      <category term="C++" scheme="http://evancoding.com/tags/C/"/>
    
      <category term="TDD" scheme="http://evancoding.com/tags/TDD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android app Draw Shapes]]></title>
    <link href="http://evancoding.com/2014/10/09/Android-app-Draw-Shapes/"/>
    <id>http://evancoding.com/2014/10/09/Android-app-Draw-Shapes/</id>
    <published>2014-10-08T16:42:31.000Z</published>
    <updated>2015-05-22T00:21:28.000Z</updated>
    <content type="html"><![CDATA[<p>My first Android App <a href="https://play.google.com/store/apps/details?id=com.evancoding.drawshapes" target="_blank" rel="external">Draw Shapes</a>, which is actually my first assignment of android programming class, is now on <a href="https://play.google.com/store/apps/details?id=com.evancoding.drawshapes" target="_blank" rel="external">Google Play</a>. <a href="https://github.com/evan-liu/DrawShaps" target="_blank" rel="external">The code</a> is shared at <a href="https://github.com/evan-liu/DrawShaps" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="ActionBar"><a href="#ActionBar" class="headerlink" title="ActionBar"></a>ActionBar</h2><p>I want to show the user what they are drawing on the action bar. So I put a <code>DrawingShapeView</code> in <a href="https://github.com/evan-liu/DrawShaps/blob/master/app/src/main/res/layout/action_bar.xml" target="_blank" rel="external">action_bar layout</a>, and set it up in my <a href="https://github.com/evan-liu/DrawShaps/blob/master/app/src/main/java/com/evancoding/drawshapes/MainActivity.java#L69-L85" target="_blank" rel="external">MainActivity class</a>.</p>
<figure class="highlight java"><figcaption><span>MainActivity.setupActionBar()</span><a href="https://github.com/evan-liu/DrawShaps/blob/master/app/src/main/java/com/evancoding/drawshapes/MainActivity.java#L69-L85" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">View actionBarView = LayoutInflater.from(<span class="keyword">this</span>).inflate(R.layout.action_bar, <span class="keyword">null</span>);</span><br><span class="line">((DrawingShapeView) actionBarView.findViewById(R.id.drawingShape)).setup(model, painter);</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">ActionBar actionBar = getActionBar();</span><br><span class="line">actionBar.setCustomView(actionBarView);</span><br><span class="line">actionBar.setDisplayShowHomeEnabled(<span class="keyword">false</span>);</span><br><span class="line">actionBar.setDisplayShowTitleEnabled(<span class="keyword">false</span>);</span><br><span class="line">actionBar.setDisplayShowCustomEnabled(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>In <a href="https://github.com/evan-liu/DrawShaps/blob/master/app/src/main/java/com/evancoding/drawshapes/view/DrawingShapeView.java#L34-L45" target="_blank" rel="external">setup() method</a> of <a href="https://github.com/evan-liu/DrawShaps/blob/master/app/src/main/java/com/evancoding/drawshapes/view/DrawingShapeView.java#L34-L45" target="_blank" rel="external">DrawingShapeView class</a> I listen to the change of color/shape from <a href="https://github.com/evan-liu/DrawShaps/blob/master/app/src/main/java/com/evancoding/drawshapes/model/DrawModel.java" target="_blank" rel="external">model class</a> and redraw it.</p>
<figure class="highlight java"><figcaption><span>DrawingShapeView.setup()</span><a href="https://github.com/evan-liu/DrawShaps/blob/master/app/src/main/java/com/evancoding/drawshapes/view/DrawingShapeView.java#L34-L45" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">model.setOnColorChangeListener(<span class="keyword">new</span> DrawModel.OnColorChangeListener() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onColorChanged</span><span class="params">(<span class="keyword">int</span> color)</span> </span>&#123;</span><br><span class="line">        invalidate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">model.setOnShapeChangeListener(<span class="keyword">new</span> DrawModel.OnShapeChangeListener() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onShapeChanged</span><span class="params">(Shape shape)</span> </span>&#123;</span><br><span class="line">        invalidate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="DrawerLayout"><a href="#DrawerLayout" class="headerlink" title="DrawerLayout"></a>DrawerLayout</h2><p>To use <code>DrawerLayout</code> you need to add <a href="http://developer.android.com/tools/support-library/index.html" target="_blank" rel="external">Support Library</a> to <code>build.gradle</code> of the app (not the top level one).</p>
<figure class="highlight gradle"><figcaption><span>app/build.gradle</span><a href="https://github.com/evan-liu/DrawShaps/blob/master/app/build.gradle" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(dir: <span class="string">'libs'</span>, <span class="keyword">include</span>: [<span class="string">'*.jar'</span>])</span><br><span class="line">    <span class="keyword">compile</span> <span class="string">"com.android.support:support-v4:20.0.0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>And make the root to be <code>DrawerLayout</code>.</p>
<figure class="highlight xml"><figcaption><span>activity_main.xml</span><a href="https://github.com/evan-liu/DrawShaps/blob/master/app/src/main/res/layout/activity_main.xml" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">android.support.v4.widget.DrawerLayout</span></span><br><span class="line">    <span class="attribute">android:id</span>=<span class="value">"@+id/drawer_layout"</span></span><br><span class="line">    <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">android.support.v4.widget.DrawerLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>The <a href="https://github.com/evan-liu/DrawShaps/blob/master/app/src/main/res/layout/activity_main.xml#L7-L10" target="_blank" rel="external">first child</a> is the main view, others will be the drawers. I put 2 drawers, one on left and one on right.</p>
<figure class="highlight xml"><figcaption><span>activity_main.xml</span><a href="https://github.com/evan-liu/DrawShaps/blob/master/app/src/main/res/layout/activity_main.xml" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// Main view</span><br><span class="line"><span class="tag">&lt;<span class="title">com.evancoding.drawshapes.view.DrawView</span> /&gt;</span></span><br><span class="line">// Left drawer</span><br><span class="line"><span class="tag">&lt;<span class="title">LinearLayout</span></span><br><span class="line">    <span class="attribute">android:id</span>=<span class="value">"@+id/toolsLayout"</span></span><br><span class="line">    <span class="attribute">android:layout_gravity</span>=<span class="value">"start"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br><span class="line">// Right drawer</span><br><span class="line"><span class="tag">&lt;<span class="title">LinearLayout</span></span><br><span class="line">    <span class="attribute">android:id</span>=<span class="value">"@+id/buttonsLayout"</span></span><br><span class="line">    <span class="attribute">android:layout_gravity</span>=<span class="value">"end"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>You can then open/close the drawers in the activity class.</p>
<figure class="highlight java"><figcaption><span>MainActivity.setupDrawer()</span><a href="https://github.com/evan-liu/DrawShaps/blob/master/app/src/main/java/com/evancoding/drawshapes/MainActivity.java#L115-L135" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setupDrawer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);</span><br><span class="line">    toolsLayout = findViewById(R.id.toolsLayout);</span><br><span class="line">    buttonsLayout = findViewById(R.id.buttonsLayout);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>MainActivity.toggleDrawer()</span><a href="https://github.com/evan-liu/DrawShaps/blob/master/app/src/main/java/com/evancoding/drawshapes/MainActivity.java#L137-L143" target="_blank" rel="external">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">toggleDrawer</span><span class="params">(View drawer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (drawerLayout.isDrawerOpen(drawer)) &#123;</span><br><span class="line">        drawerLayout.closeDrawer(drawer);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        drawerLayout.openDrawer(drawer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="StarDrawer"><a href="#StarDrawer" class="headerlink" title="StarDrawer"></a>StarDrawer</h2><p>It took me a lot of time to figure out how to <a href="https://github.com/evan-liu/DrawShaps/blob/master/app/src/main/java/com/evancoding/drawshapes/shapes/StarDrawer.java" target="_blank" rel="external">draw a Star</a>. You can find it and all the other code on <a href="https://github.com/evan-liu/DrawShaps/" target="_blank" rel="external">GitHub</a>.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>My first Android App <a href="https://play.google.com/store/apps/details?id=com.evancoding.drawshapes">Draw Shapes</a>, which is actually my first assignment of android programming class, is now on <a href="https://play.google.com/store/apps/details?id=com.evancoding.drawshapes">Google Play</a>. <a href="https://github.com/evan-liu/DrawShaps">The code</a> is shared at <a href="https://github.com/evan-liu/DrawShaps">GitHub</a>.</p>
<h2 id="ActionBar"><a href="#ActionBar" class="headerlink" title="ActionBar"></a>ActionBar</h2><p>I want to show the user what they are drawing on the action bar. So I put a <code>DrawingShapeView</code> in <a href="https://github.com/evan-liu/DrawShaps/blob/master/app/src/main/res/layout/action_bar.xml">action_bar layout</a>, and set it up in my <a href="https://github.com/evan-liu/DrawShaps/blob/master/app/src/main/java/com/evancoding/drawshapes/MainActivity.java#L69-L85">MainActivity class</a>.</p>
<figure class="highlight java"><figcaption><span>MainActivity.setupActionBar()</span><a href="https://github.com/evan-liu/DrawShaps/blob/master/app/src/main/java/com/evancoding/drawshapes/MainActivity.java#L69-L85">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">View actionBarView = LayoutInflater.from(<span class="keyword">this</span>).inflate(R.layout.action_bar, <span class="keyword">null</span>);</span><br><span class="line">((DrawingShapeView) actionBarView.findViewById(R.id.drawingShape)).setup(model, painter);</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">ActionBar actionBar = getActionBar();</span><br><span class="line">actionBar.setCustomView(actionBarView);</span><br><span class="line">actionBar.setDisplayShowHomeEnabled(<span class="keyword">false</span>);</span><br><span class="line">actionBar.setDisplayShowTitleEnabled(<span class="keyword">false</span>);</span><br><span class="line">actionBar.setDisplayShowCustomEnabled(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="Android" scheme="http://evancoding.com/tags/Android/"/>
    
      <category term="Apps" scheme="http://evancoding.com/tags/Apps/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[TDD Demo GameOfLife with Android Studio]]></title>
    <link href="http://evancoding.com/2014/09/06/TDD-Demo-GameOfLife-with-Android-Studio/"/>
    <id>http://evancoding.com/2014/09/06/TDD-Demo-GameOfLife-with-Android-Studio/</id>
    <published>2014-09-06T07:27:05.000Z</published>
    <updated>2015-05-22T00:21:38.000Z</updated>
    <content type="html"><![CDATA[<p>On my Java class the teacher used <a href="http://en.wikipedia.org/wiki/Conway%27s_Game_of_Life" target="_blank" rel="external">Conway’s Game of Life</a> as an example for <a href="http://en.wikipedia.org/wiki/Test-driven_development" target="_blank" rel="external">TDD</a> and I found it a really good example. So I made <a href="https://www.youtube.com/watch?v=-jDmel5Ru0E&amp;list=PLZTujjIA-of3RHJmrx7frnxabInHp8VVA" target="_blank" rel="external">some videos</a> to demonstrate how I tried TDD on it. In <a href="https://www.youtube.com/watch?v=-jDmel5Ru0E&amp;list=PLZTujjIA-of3RHJmrx7frnxabInHp8VVA" target="_blank" rel="external">the videos</a> when I say “grid” or “gred” it should actually be “cell” (And I pronounced “live” wrongly). Sorry for my poor English. If the videos are not clear please try to change quality to HD by the settings button.</p>
<p>For each step I also posted new or changed code below, and links of full code after each step on <a href="https://github.com/evan-liu/TDD-GameLife-AndroidStudio" target="_blank" rel="external">GitHub</a>. I posted some keyboard shortcuts as well. I don’t know what they are on windows but you can find them (and change them if you would like) in “Keymap” section of Android Studio’s preference (or settings) panel.</p>
<h2 id="1-_Create_GameOfLife_Project"><a href="#1-_Create_GameOfLife_Project" class="headerlink" title="1. Create GameOfLife Project"></a>1. Create GameOfLife Project</h2><p>The first step simply create a new project on <a href="http://developer.android.com/sdk/installing/studio.html" target="_blank" rel="external">Android Studio</a>. <a href="http://developer.android.com/sdk/installing/studio.html" target="_blank" rel="external">Android Studio</a> is still in beta (I’m using 0.8.6) but I am very happy with it so far. On the <a href="http://www.meetup.com/GDGAuckland/events/199648182/" target="_blank" rel="external">GDG Auckland September Meetup</a>, <a href="https://twitter.com/juliusspencer" target="_blank" rel="external">Julius Spencer</a> said his team (<a href="http://www.juliusspencer.co.nz/" target="_blank" rel="external">JSA</a>) has already been using Android Studio on production for one year now. So give it a try if you haven’t yet. It’s so much better than eclipse!</p>
<a id="more"></a>
<ul>
<li>Run…: option + control + R</li>
<li>Run last: control + R</li>
</ul>
<div class="video-container"><iframe src="//www.youtube.com/embed/-jDmel5Ru0E" frameborder="0" allowfullscreen></iframe></div>
<h2 id="2-_Create_class_GameModel_and_test_case_GameModelTest"><a href="#2-_Create_class_GameModel_and_test_case_GameModelTest" class="headerlink" title="2. Create class GameModel and test case GameModelTest"></a>2. Create class <code>GameModel</code> and test case <code>GameModelTest</code></h2><ul>
<li>Create class: (New…) command + N</li>
<li>Create test: (Show Intention Actions) option + Enter</li>
</ul>
<div class="video-container"><iframe src="//www.youtube.com/embed/jHQvbW4qisY" frameborder="0" allowfullscreen></iframe></div>
<figure class="highlight java"><figcaption><span>GameModelTest.java</span><a href="https://github.com/evan-liu/TDD-GameLife-AndroidStudio/blob/02TestCase/app/src/androidTest/java/me/eidiot/gameoflife/GameModelTest.java" target="_blank" rel="external">View Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GameModelTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setUp();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>GameModel.java</span><a href="https://github.com/evan-liu/TDD-GameLife-AndroidStudio/blob/02TestCase/app/src/main/java/me/eidiot/gameoflife/GameModel.java" target="_blank" rel="external">View Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GameModel</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-_GameModel_initialisation"><a href="#3-_GameModel_initialisation" class="headerlink" title="3. GameModel initialisation"></a>3. <code>GameModel</code> initialisation</h2><ul>
<li>New test method: (New…) command + N</li>
<li>Create non-existent method or class: (Show Intention Actions) option + Enter</li>
<li>Duplicate Line or Block: command + D</li>
</ul>
<div class="video-container"><iframe src="//www.youtube.com/embed/DieYwoooLcE" frameborder="0" allowfullscreen></iframe></div>
<figure class="highlight java"><figcaption><span>GameModelTest.java</span><a href="https://github.com/evan-liu/TDD-GameLife-AndroidStudio/blob/03Init/app/src/androidTest/java/me/eidiot/gameoflife/GameModelTest.java" target="_blank" rel="external">View Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GameModelTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span> </span>&#123;</span><br><span class="line">    GameModel instance;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setUp();</span><br><span class="line">        instance = <span class="keyword">new</span> GameModel(<span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        assertEquals(<span class="number">3</span>, instance.getRows());</span><br><span class="line">        assertEquals(<span class="number">3</span>, instance.getColumns());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>GameModel.java</span><a href="https://github.com/evan-liu/TDD-GameLife-AndroidStudio/blob/03Init/app/src/main/java/me/eidiot/gameoflife/GameModel.java" target="_blank" rel="external">View Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GameModel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rows;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> columns;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GameModel</span><span class="params">(<span class="keyword">int</span> rows, <span class="keyword">int</span> columns)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rows = rows;</span><br><span class="line">        <span class="keyword">this</span>.columns = columns;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRows</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rows;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getColumns</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> columns;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-_GameModel-isAlive_28_29"><a href="#4-_GameModel-isAlive_28_29" class="headerlink" title="4. GameModel.isAlive()"></a>4. <code>GameModel.isAlive()</code></h2><div class="video-container"><iframe src="//www.youtube.com/embed/e2pg99j6fWQ" frameborder="0" allowfullscreen></iframe></div>
<figure class="highlight java"><figcaption><span>GameModelTest.java</span><a href="https://github.com/evan-liu/TDD-GameLife-AndroidStudio/blob/04IsAlive/app/src/androidTest/java/me/eidiot/gameoflife/GameModelTest.java" target="_blank" rel="external">View Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_is_alive</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    assertFalse(instance.isAlive(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>GameModel.java</span><a href="https://github.com/evan-liu/TDD-GameLife-AndroidStudio/blob/04IsAlive/app/src/main/java/me/eidiot/gameoflife/GameModel.java" target="_blank" rel="external">View Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAlive</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> column)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-_GameModel-makeAlive_28_29"><a href="#5-_GameModel-makeAlive_28_29" class="headerlink" title="5. GameModel.makeAlive()"></a>5. <code>GameModel.makeAlive()</code></h2><ul>
<li>Go to test (Or go to test subject in test case): command + shift + T</li>
</ul>
<div class="video-container"><iframe src="//www.youtube.com/embed/Sb68dN41wOA" frameborder="0" allowfullscreen></iframe></div>
<figure class="highlight java"><figcaption><span>GameModelTest.java</span><a href="https://github.com/evan-liu/TDD-GameLife-AndroidStudio/blob/05MakeAlive/app/src/androidTest/java/me/eidiot/gameoflife/GameModelTest.java" target="_blank" rel="external">View Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_make_alive</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    instance.makeAlive(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    assertTrue(instance.isAlive(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>GameModel.java</span><a href="https://github.com/evan-liu/TDD-GameLife-AndroidStudio/blob/05MakeAlive/app/src/main/java/me/eidiot/gameoflife/GameModel.java" target="_blank" rel="external">View Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> map[][];</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">GameModel</span><span class="params">(<span class="keyword">int</span> rows, <span class="keyword">int</span> columns)</span> </span>&#123;</span><br><span class="line">    map = <span class="keyword">new</span> <span class="keyword">boolean</span>[rows][columns];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAlive</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> column)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> map[row][column];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeAlive</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> column)</span> </span>&#123;</span><br><span class="line">    map[row][column] = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-_Test_out_of_map"><a href="#6-_Test_out_of_map" class="headerlink" title="6. Test out of map"></a>6. Test out of map</h2><ul>
<li>Refactor/Extract/Method…: command + option + M</li>
<li>Move Statement Up/Down: command + shift + up/down</li>
<li>Move Line Up/Down: option + shift + up/down</li>
</ul>
<div class="video-container"><iframe src="//www.youtube.com/embed/48q8iLhAXb8" frameborder="0" allowfullscreen></iframe></div>
<figure class="highlight java"><figcaption><span>GameModelTest.java</span><a href="https://github.com/evan-liu/TDD-GameLife-AndroidStudio/blob/06OutOfMap/app/src/androidTest/java/me/eidiot/gameoflife/GameModelTest.java" target="_blank" rel="external">View Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_is_alive</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    assertFalse(instance.isAlive(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="comment">// out of map</span></span><br><span class="line">    assertFalse(instance.isAlive(-<span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">    assertFalse(instance.isAlive(<span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">    assertFalse(instance.isAlive(<span class="number">3</span>, <span class="number">0</span>));</span><br><span class="line">    assertFalse(instance.isAlive(<span class="number">0</span>, <span class="number">3</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_make_alive</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    instance.makeAlive(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    assertTrue(instance.isAlive(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="comment">// out of map</span></span><br><span class="line">    instance.makeAlive(-<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    instance.makeAlive(<span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    instance.makeAlive(<span class="number">3</span>, <span class="number">0</span>);</span><br><span class="line">    instance.makeAlive(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>GameModel.java</span><a href="https://github.com/evan-liu/TDD-GameLife-AndroidStudio/blob/06OutOfMap/app/src/main/java/me/eidiot/gameoflife/GameModel.java" target="_blank" rel="external">View Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAlive</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> column)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !isOutOfMap(row, column) &amp;&amp; map[row][column];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeAlive</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> column)</span> </span>&#123;</span><br><span class="line">    map[row][column] = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (!isOutOfMap(row, column)) &#123;</span><br><span class="line">        map[row][column] = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isOutOfMap</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> column)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> row &lt; <span class="number">0</span> || row &gt; rows - <span class="number">1</span> || column &lt; <span class="number">0</span> || column &gt; columns - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="7-_GameModel-makeDead_28_29"><a href="#7-_GameModel-makeDead_28_29" class="headerlink" title="7. GameModel.makeDead()"></a>7. <code>GameModel.makeDead()</code></h2><div class="video-container"><iframe src="//www.youtube.com/embed/72XeORLtxnU" frameborder="0" allowfullscreen></iframe></div>
<figure class="highlight java"><figcaption><span>GameModelTest.java</span><a href="https://github.com/evan-liu/TDD-GameLife-AndroidStudio/blob/07MakeDead/app/src/androidTest/java/me/eidiot/gameoflife/GameModelTest.java" target="_blank" rel="external">View Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_make_dead</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    instance.makeAlive(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    instance.makeDead(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    assertFalse(instance.isAlive(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="comment">// out of map</span></span><br><span class="line">    instance.makeDead(-<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    instance.makeDead(<span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    instance.makeDead(<span class="number">3</span>, <span class="number">0</span>);</span><br><span class="line">    instance.makeDead(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>GameModel.java</span><a href="https://github.com/evan-liu/TDD-GameLife-AndroidStudio/blob/07MakeDead/app/src/main/java/me/eidiot/gameoflife/GameModel.java" target="_blank" rel="external">View Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeDead</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> column)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isOutOfMap(row, column)) &#123;</span><br><span class="line">        map[row][column] = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="8-_Rule_1_to_Rule_3"><a href="#8-_Rule_1_to_Rule_3" class="headerlink" title="8. Rule 1 to Rule 3"></a>8. Rule 1 to Rule 3</h2><div class="video-container"><iframe src="//www.youtube.com/embed/R0rGYXDSpjA" frameborder="0" allowfullscreen></iframe></div>
<figure class="highlight java"><figcaption><span>GameModelTest.java</span><a href="https://github.com/evan-liu/TDD-GameLife-AndroidStudio/blob/08Rule1To3/app/src/androidTest/java/me/eidiot/gameoflife/GameModelTest.java" target="_blank" rel="external">View Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_live_cell</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    instance.makeAlive(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// Rule 1 (0, 1)</span></span><br><span class="line">    assertFalse(instance.willLive(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">    instance.makeAlive(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    assertFalse(instance.willLive(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">    <span class="comment">// Rule 2 (2, 3)</span></span><br><span class="line">    instance.makeAlive(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    assertTrue(instance.willLive(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">    instance.makeAlive(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">    assertTrue(instance.willLive(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">    <span class="comment">// Rule 3 ( &gt;3 )</span></span><br><span class="line">    instance.makeAlive(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    assertFalse(instance.willLive(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>GameModel.java</span><a href="https://github.com/evan-liu/TDD-GameLife-AndroidStudio/blob/08Rule1To3/app/src/main/java/me/eidiot/gameoflife/GameModel.java" target="_blank" rel="external">View Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">willLive</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> column)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> aliveNeighbours = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = row - <span class="number">1</span>; i &lt;= row + <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = column - <span class="number">1</span>; j &lt;= column + <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!(i == row &amp;&amp; j == column) &amp;&amp; isAlive(i, j)) &#123;</span><br><span class="line">                aliveNeighbours++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isAlive(row, column)) &#123;</span><br><span class="line">        <span class="keyword">return</span> aliveNeighbours == <span class="number">2</span> || aliveNeighbours == <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="9-_Rule_4"><a href="#9-_Rule_4" class="headerlink" title="9. Rule 4"></a>9. Rule 4</h2><div class="video-container"><iframe src="//www.youtube.com/embed/tXAzSxjySyY" frameborder="0" allowfullscreen></iframe></div>
<figure class="highlight java"><figcaption><span>GameModelTest.java</span><a href="https://github.com/evan-liu/TDD-GameLife-AndroidStudio/blob/09Rule4/app/src/androidTest/java/me/eidiot/gameoflife/GameModelTest.java" target="_blank" rel="external">View Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_dead_cell</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 0 -&gt; dead</span></span><br><span class="line">    assertFalse(instance.willLive(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">    <span class="comment">// 1 -&gt; dead</span></span><br><span class="line">    instance.makeAlive(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    assertFalse(instance.willLive(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">    <span class="comment">// 2 -&gt; dead</span></span><br><span class="line">    instance.makeAlive(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    assertFalse(instance.willLive(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">    <span class="comment">// 3 -&gt; Alive</span></span><br><span class="line">    instance.makeAlive(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">    assertTrue(instance.willLive(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">    <span class="comment">// 4 -&gt; dead</span></span><br><span class="line">    instance.makeAlive(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    assertFalse(instance.willLive(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>GameModel.java</span><a href="https://github.com/evan-liu/TDD-GameLife-AndroidStudio/blob/09Rule4/app/src/main/java/me/eidiot/gameoflife/GameModel.java" target="_blank" rel="external">View Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">willLive</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> column)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> aliveNeighbours = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = row - <span class="number">1</span>; i &lt;= row + <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = column - <span class="number">1</span>; j &lt;= column + <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!(i == row &amp;&amp; j == column) &amp;&amp; isAlive(i, j)) &#123;</span><br><span class="line">                aliveNeighbours++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isAlive(row, column)) &#123;</span><br><span class="line">        <span class="keyword">return</span> aliveNeighbours == <span class="number">2</span> || aliveNeighbours == <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> aliveNeighbours == <span class="number">3</span>; <span class="comment">// The only changed line.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="10-_GameModel-next_28_29"><a href="#10-_GameModel-next_28_29" class="headerlink" title="10. GameModel.next()"></a>10. <code>GameModel.next()</code></h2><div class="video-container"><iframe src="//www.youtube.com/embed/1Bzp-4cvyVI" frameborder="0" allowfullscreen></iframe></div>
<figure class="highlight java"><figcaption><span>GameModelTest.java</span><a href="https://github.com/evan-liu/TDD-GameLife-AndroidStudio/blob/10Next/app/src/androidTest/java/me/eidiot/gameoflife/GameModelTest.java" target="_blank" rel="external">View Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_live_cell</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    assertFalse(instance.willLive(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">    instance.next();</span><br><span class="line">    assertFalse(instance.isAlive(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_dead_cell</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    assertFalse(instance.willLive(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">    instance.next();</span><br><span class="line">    assertFalse(instance.isAlive(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>GameModel.java</span><a href="https://github.com/evan-liu/TDD-GameLife-AndroidStudio/blob/10Next/app/src/main/java/me/eidiot/gameoflife/GameModel.java" target="_blank" rel="external">View Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> newMap[][] = <span class="keyword">new</span> <span class="keyword">boolean</span>[rows][columns];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; columns; j++) &#123;</span><br><span class="line">            newMap[i][j] = willLive(i, j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    map = newMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="11-_GameView"><a href="#11-_GameView" class="headerlink" title="11. GameView"></a>11. GameView</h2><ul>
<li>Recent Files: command + E</li>
<li>Override Methods…: control + O</li>
<li>Open Class: command + O</li>
<li>Open File: command + shift + O</li>
</ul>
<div class="video-container"><iframe src="//www.youtube.com/embed/10-Tp-v829o" frameborder="0" allowfullscreen></iframe></div>
<figure class="highlight java"><figcaption><span>GameView.java</span><a href="https://github.com/evan-liu/TDD-GameLife-AndroidStudio/blob/11GameView/app/src/main/java/me/eidiot/gameoflife/GameView.java" target="_blank" rel="external">View Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GameView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> GameModel model;</span><br><span class="line">    <span class="keyword">private</span> Paint strokePaint;</span><br><span class="line">    <span class="keyword">private</span> Paint fillPaint;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GameView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GameView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GameView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">(GameModel model)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.model = model;</span><br><span class="line">        strokePaint = <span class="keyword">new</span> Paint();</span><br><span class="line">        strokePaint.setStyle(Paint.Style.STROKE);</span><br><span class="line">        strokePaint.setColor(Color.LTGRAY);</span><br><span class="line">        fillPaint = <span class="keyword">new</span> Paint();</span><br><span class="line">        fillPaint.setStyle(Paint.Style.FILL);</span><br><span class="line">        fillPaint.setColor(Color.BLACK);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; model.getRows(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; model.getColumns(); j++) &#123;</span><br><span class="line">                <span class="keyword">int</span> left = size * i;</span><br><span class="line">                <span class="keyword">int</span> top = size * j;</span><br><span class="line">                <span class="keyword">int</span> right = left + size;</span><br><span class="line">                <span class="keyword">int</span> bottom = top + size;</span><br><span class="line">                <span class="keyword">if</span> (model.isAlive(i, j)) &#123;</span><br><span class="line">                    canvas.drawRect(left, top, right, bottom, fillPaint);</span><br><span class="line">                &#125;</span><br><span class="line">                canvas.drawRect(left, top, right, bottom, strokePaint);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><figcaption><span>activity_main.xml</span><a href="https://github.com/evan-liu/TDD-GameLife-AndroidStudio/blob/11GameView/app/src/main/res/layout/activity_main.xml" target="_blank" rel="external">View Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">RelativeLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">me.eidiot.gameoflife.GameView</span></span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/gameView"</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>MainActivity.java</span><a href="https://github.com/evan-liu/TDD-GameLife-AndroidStudio/blob/11GameView/app/src/main/java/me/eidiot/gameoflife/MainActivity.java" target="_blank" rel="external">View Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        GameModel model = <span class="keyword">new</span> GameModel(<span class="number">30</span>, <span class="number">15</span>);</span><br><span class="line">        GameView view = (GameView) findViewById(R.id.gameView);</span><br><span class="line">        view.setup(model);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="12-_Run_the_game_and_Glider_demo"><a href="#12-_Run_the_game_and_Glider_demo" class="headerlink" title="12. Run the game and Glider demo"></a>12. Run the game and Glider demo</h2><div class="video-container"><iframe src="//www.youtube.com/embed/LK46tdcrr3A" frameborder="0" allowfullscreen></iframe></div>
<figure class="highlight java"><figcaption><span>MainActivity.java</span><a href="https://github.com/evan-liu/TDD-GameLife-AndroidStudio/blob/12Glider/app/src/main/java/me/eidiot/gameoflife/MainActivity.java" target="_blank" rel="external">View Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="comment">// Model</span></span><br><span class="line">        <span class="keyword">final</span> GameModel model = <span class="keyword">new</span> GameModel(<span class="number">30</span>, <span class="number">15</span>);</span><br><span class="line">        <span class="comment">// Glider</span></span><br><span class="line">        model.makeAlive(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        model.makeAlive(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">        model.makeAlive(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">        model.makeAlive(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        model.makeAlive(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="comment">// View</span></span><br><span class="line">        <span class="keyword">final</span> GameView view = (GameView) findViewById(R.id.gameView);</span><br><span class="line">        view.setup(model);</span><br><span class="line">        <span class="comment">// Run loop</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> INTERVAL = <span class="number">300</span>;</span><br><span class="line">        <span class="keyword">final</span> Handler handler = <span class="keyword">new</span> Handler();</span><br><span class="line">        Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                handler.postDelayed(<span class="keyword">this</span>, INTERVAL);</span><br><span class="line">                <span class="comment">// Update</span></span><br><span class="line">                model.next();</span><br><span class="line">                view.invalidate();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        handler.postDelayed(runnable, INTERVAL);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>On my Java class the teacher used <a href="http://en.wikipedia.org/wiki/Conway%27s_Game_of_Life">Conway’s Game of Life</a> as an example for <a href="http://en.wikipedia.org/wiki/Test-driven_development">TDD</a> and I found it a really good example. So I made <a href="https://www.youtube.com/watch?v=-jDmel5Ru0E&amp;list=PLZTujjIA-of3RHJmrx7frnxabInHp8VVA">some videos</a> to demonstrate how I tried TDD on it. In <a href="https://www.youtube.com/watch?v=-jDmel5Ru0E&amp;list=PLZTujjIA-of3RHJmrx7frnxabInHp8VVA">the videos</a> when I say “grid” or “gred” it should actually be “cell” (And I pronounced “live” wrongly). Sorry for my poor English. If the videos are not clear please try to change quality to HD by the settings button.</p>
<p>For each step I also posted new or changed code below, and links of full code after each step on <a href="https://github.com/evan-liu/TDD-GameLife-AndroidStudio">GitHub</a>. I posted some keyboard shortcuts as well. I don’t know what they are on windows but you can find them (and change them if you would like) in “Keymap” section of Android Studio’s preference (or settings) panel.</p>
<h2 id="1-_Create_GameOfLife_Project"><a href="#1-_Create_GameOfLife_Project" class="headerlink" title="1. Create GameOfLife Project"></a>1. Create GameOfLife Project</h2><p>The first step simply create a new project on <a href="http://developer.android.com/sdk/installing/studio.html">Android Studio</a>. <a href="http://developer.android.com/sdk/installing/studio.html">Android Studio</a> is still in beta (I’m using 0.8.6) but I am very happy with it so far. On the <a href="http://www.meetup.com/GDGAuckland/events/199648182/">GDG Auckland September Meetup</a>, <a href="https://twitter.com/juliusspencer">Julius Spencer</a> said his team (<a href="http://www.juliusspencer.co.nz/">JSA</a>) has already been using Android Studio on production for one year now. So give it a try if you haven’t yet. It’s so much better than eclipse!</p>]]>
    
    </summary>
    
      <category term="Android" scheme="http://evancoding.com/tags/Android/"/>
    
      <category term="TDD" scheme="http://evancoding.com/tags/TDD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Run different hsqldb databases]]></title>
    <link href="http://evancoding.com/2014/08/26/Run-different-hsqldb-databases/"/>
    <id>http://evancoding.com/2014/08/26/Run-different-hsqldb-databases/</id>
    <published>2014-08-26T03:47:32.000Z</published>
    <updated>2014-08-26T03:48:13.000Z</updated>
    <content type="html"><![CDATA[<p>I have different projects using hsqldb with slightly different tables and I want to have different databases for them. After I found out how to run <a href="2014/07/26/hsqldb-on-Mac-OS-X/">hsqldb on Mac OS X</a>, it turns out quite straightforward to do so.</p>
<p>What the windows runner of hsqldb <code>runServer.bat</code> does is going to the <code>data</code> folder and run the server there. Then the server will create and save all data in this <code>data</code> folder.</p>
<figure class="highlight bat"><figcaption><span>runServer.bat</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ..\data</span><br><span class="line">@java -classpath ../lib/hsqldb.jar org.hsqldb.server.Server %<span class="number">1</span> %<span class="number">2</span> %<span class="number">3</span> %<span class="number">4</span> %<span class="number">5</span> %<span class="number">6</span> %<span class="number">7</span> %<span class="number">8</span> %<span class="number">9</span></span><br></pre></td></tr></table></figure>
<p>So my new script make a new folder under each project named <code>db</code> or whatever and go into it then run the server. All projects can now have their own hsqldb databases.</p>
<figure class="highlight sh"><figcaption><span>runServer.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir db</span><br><span class="line"><span class="built_in">cd</span> db</span><br><span class="line">java -cp path/to/hsqldb/lib/hsqldb.jar org.hsqldb.server.Server</span><br></pre></td></tr></table></figure>
<p>I name this script <code>db.sh</code> and put it in my workspace then in each project I run <code>../db.sh</code>. If I do need some new porject have the same data to start with I only need to copy the db folder.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>I have different projects using hsqldb with slightly different tables and I want to have different databases for them. After I found out ]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Tips of using Realm iOS]]></title>
    <link href="http://evancoding.com/2014/08/22/Tips-of-using-Realm-iOS/"/>
    <id>http://evancoding.com/2014/08/22/Tips-of-using-Realm-iOS/</id>
    <published>2014-08-21T19:58:14.000Z</published>
    <updated>2015-05-22T00:22:18.000Z</updated>
    <content type="html"><![CDATA[<p>I am trying to use <a href="http://realm.io/" target="_blank" rel="external">Realm</a> on an iOS project by <a href="http://cocoapods.org/" target="_blank" rel="external">CocoaPods</a>. After hours debugging, I finally got it working and there are 3 tips I’d like to record.</p>
<h2 id="Tip_1_3A_Work_on_other_CocoaPods_library_project"><a href="#Tip_1_3A_Work_on_other_CocoaPods_library_project" class="headerlink" title="Tip 1: Work on other CocoaPods library project"></a>Tip 1: Work on other <a href="http://cocoapods.org/" target="_blank" rel="external">CocoaPods</a> library project</h2><p>I am using <a href="http://cocoapods.org/" target="_blank" rel="external">CocoaPods</a> to separate the iOS project to libraries. <a href="http://realm.io/" target="_blank" rel="external">Realm</a> works fine with the main app and libraries separately, but the libraries couldn’t be compiled as Pods project in the main app. I solved this problem by adding <a href="http://realm.io/" target="_blank" rel="external">Realm</a> framework to the Pods project and add it to the library targets myself. But I need to do this every time after I run <code>pod update</code> which I need to do frequently. I need to write a script to do it for me later.</p>
<p>(<strong>Update 21.09.2014</strong>: Realm 0.85.0 use source code instead of framework file so Tip 1 is not needed now)</p>
<h2 id="Tip_2_3A_Runtime_errors_when_try_to_write_Realm_model_objects"><a href="#Tip_2_3A_Runtime_errors_when_try_to_write_Realm_model_objects" class="headerlink" title="Tip 2: Runtime errors when try to write Realm model objects"></a>Tip 2: Runtime errors when try to write <a href="http://realm.io/" target="_blank" rel="external">Realm</a> model objects</h2><p>If you need to use a RLMArray of one model object <code>SomeObject</code> in another, you need to use <code>RLM_ARRAY_TYPE(SomeObject)</code> and declare it as <code>RLMArray&lt;SomeObject&gt; *someObjects</code>. At first I couldn’t get it work so I marked the <code>someObjects</code> property ignored. Then I can’t get it work any more and the runtime error tell me nothing about what happened. The problems is, when you change one RLMObject schema and you already stored some data as the old schema, you need to delete the old Realm file (or <a href="http://realm.io/docs/cocoa/0.83.0/#migrations" target="_blank" rel="external">migrate</a>).</p>
<h2 id="Tip_3_3A_Do_not_work_with__26lt_3BNSObject_26gt_3B_protocol"><a href="#Tip_3_3A_Do_not_work_with__26lt_3BNSObject_26gt_3B_protocol" class="headerlink" title="Tip 3: Do not work with &lt;NSObject&gt; protocol"></a>Tip 3: Do not work with <code>&lt;NSObject&gt;</code> protocol</h2><p>After I upgraded to Realm 0.85.0 and Xcode 6, Realm complained about a ‘hash’ property. After debugging for a while I found out that it is because some of my RLMObjects conform to <code>&lt;NSObject&gt;</code> protocol. It was fine with Realm 0.83.0 and Xcode 5. I’m not sure if it’s because of my upgrade of Realm or Xcode but it was fixed just by removing the <code>&lt;NSObject&gt;</code> protocol from the RLMObjects.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>I am trying to use <a href="http://realm.io/" target="_blank" rel="external">Realm</a> on an iOS project by <a href="http://cocoapods.org]]>
    </summary>
    
      <category term="iOS" scheme="http://evancoding.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hsqldb on Mac OS X]]></title>
    <link href="http://evancoding.com/2014/07/26/hsqldb-on-Mac-OS-X/"/>
    <id>http://evancoding.com/2014/07/26/hsqldb-on-Mac-OS-X/</id>
    <published>2014-07-26T01:29:46.000Z</published>
    <updated>2014-08-05T06:11:51.000Z</updated>
    <content type="html"><![CDATA[<p>It took me a while googling how to run <a href="http://www.hsqldb.org/" target="_blank" rel="external">hsqldb</a> on Mac OS X. It turned out very easy when I looked back at its runners for Windows:</p>
<figure class="highlight bat"><figcaption><span>runServer.bat</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ..\data</span><br><span class="line">@java -classpath ../lib/hsqldb.jar org.hsqldb.server.Server %<span class="number">1</span> %<span class="number">2</span> %<span class="number">3</span> %<span class="number">4</span> %<span class="number">5</span> %<span class="number">6</span> %<span class="number">7</span> %<span class="number">8</span> %<span class="number">9</span></span><br></pre></td></tr></table></figure>
<p>Get it running on OS X just by typing it on Terminal, or create a runServer.sh file and run it anywhere.</p>
<figure class="highlight sh"><figcaption><span>runServer.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> path/to/hsqldb/data</span><br><span class="line">java -cp ../lib/hsqldb.jar org.hsqldb.server.Server</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>It took me a while googling how to run <a href="http://www.hsqldb.org/" target="_blank" rel="external">hsqldb</a> on Mac OS X. It turned ]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[New blog with Hexo]]></title>
    <link href="http://evancoding.com/2014/07/26/New-blog-with-Hexo/"/>
    <id>http://evancoding.com/2014/07/26/New-blog-with-Hexo/</id>
    <published>2014-07-25T23:18:29.000Z</published>
    <updated>2015-02-28T20:30:47.000Z</updated>
    <content type="html"><![CDATA[<p>I don’t remember when I started to blog, maybe in 2005. I don’t remember when I blogged last time either, maybe in 2010. I don’t even remember when I lost my domain for my old blog.</p>
<p>In 2006 I started to learn ActionScript 3 and wrote a few tutorials about it. I found that interest is the best teacher and teaching is the best way to learn. Now I am back to school as an international student in an English speaking country, so writing blog again in English must be a good idea.</p>
<p>I’d like to use Github to host my blog this time and <a href="http://octopress.org/" target="_blank" rel="external">Octopress</a> seems not good enough because of its slow compiling. Then I found <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>, “<em>A fast, simple &amp; powerful blog framework, powered by Node.js.</em>“ It is simple and fast, and I am happy with it so far.</p>
<p>So,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World</span><br></pre></td></tr></table></figure></p>
<p>Again.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>I don’t remember when I started to blog, maybe in 2005. I don’t remember when I blogged last time either, maybe in 2010. I don’t even rem]]>
    </summary>
    
  </entry>
  
</feed>
